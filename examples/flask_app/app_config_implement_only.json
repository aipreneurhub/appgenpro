{
    "_comments": [
            "MUST HAVE ROLES: Client, Engineers",
            "MUST HAVE TASKS: Implementation"
    ],
    "team": [
        { 
            "role": "Client",
            "goal": "To create a fully-working POC application with high-level requirements.",
            "constraints": "I can provide feedback.",
            "human_input_mode": "ALWAYS"
        },
        {
            "role": "SeniorEngineer",
            "goal": "As a Senior Engineer, your goal is to make sure that the designed technical solution for the client's request is successfully implemented. This is done in a pair programming paradigm with the Junior Engineers. You are responsible for creating a development backlog based on the technical solution design. You are also responsible for guiding the Junior Engineer to complete the tasks in development backlog. You MUST check the code if it does not work provide feedback back to Junior Engineer. You MUST ensure the quality of the code is good. You MUST finish the entire backlog one by one as instructed and return all the code written when fully done. ",
            "constraints": "You MUST ONLY be mentoring the Junior Engineer. You MUST ONLY be working on web applications.",
            "watch_list": ["SolutionArchitect"],
            "actions": ["WriteDevelopmentBacklogDocument"]
        },
        {
            "role": "JuniorEngineer",
            "goal": "As a Junior Engineer, your goal is to complete the tasks in the given product backlog as instructed by the Senior Engineer. You MUST use your assistant to help you write code. You MUST fully implement the code correctly for each task with no empty functions or classes, compliant to language industry standards, and readable. You MUST fix the code if it does not work or if you receive feedback from pair programming. You MUST finish the entire backlog one by one as instructed and return all the code written when fully done. For each task, make sure that you provide feedback about the code to the assistant so that the assistant can write better code. If you have any feedback to fix the code, you MUST instruct the assistant to fix the code before moving onto the next task. Otherwise if the code is perfect, you can instruct them to move on right away to the next task.",
            "constraints": "You MUST ONLY be working on coding the web applications.",
            "watch_list": ["SeniorEngineer"],
            "actions": ["WriteCode"]
        }
    ],
    "tasks" : [
        {
            "name": "Implementation",
            "description": "Implementing The Application",
            "assistant_role_name": "JuniorEngineer",
            "user_role_name": "SeniorEngineer",
            "task_prompt": "Based on the development backlog ({backlog}), and the organization standards ({organization_standards}), write executable code only ensuring adherence to the project's full context. Start starting with the 'main' file and proceeding in dependency order, with no placeholders, no partial implementations, and thorough debugging. You must first evaluate what you have created and reply with working code only.",
            "placeholders": {
                "organization_standards": [
                        "UI Design patterns: Implement the react design patterns.",
                        "React:Follow the official React guidelines for component structure, state management, and hooks. Use JSX properly and keep components small and focused. Apply linting tools like ESLint for code quality.",
                        "Python REST APIs: Adhere to PEP 8 standards for Python code style. Use frameworks like Flask or Django REST framework effectively. Ensure proper error handling and use HTTP status codes correctly.",
                        "Node.js: Use asynchronous programming models properly. Structure your project clearly (e.g., MVC pattern). Apply linting with tools like ESLint.",
                        "Database Access from Python: Use ORM libraries like SQLAlchemy for complex queries and database management. Ensure secure database connections and handle exceptions. Follow best practices for database schema design and query optimization.",
                        "Dockerization Example code: [```\nFROM node:14\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 3000\nCMD [\"node\", \"server.js\"]\n```\nThis Dockerfile creates a Docker image for a Node.js microservice, installing dependencies and setting the command to start the server.]",
                        "Deployment to Render.com example code: [```yaml\n# render.yaml\nservices:\n- type: web\n  name: flask-react-app\n  env: docker\n  dockerfilePath: ./Dockerfile\n  envVars:\n  - key: ENVIRONMENT\n    value: production\n  - key: DATABASE_URL\n    value: your_database_url\n  healthCheckPath: /\n  regions:\n  - frankfurt\n  autoDeploy: true\n  buildCommand: python -m build\n  startCommand: python run.py\n```]",
                        "SQLAlchemy example code:: [```python\nfrom flask_sqlalchemy import SQLAlchemy\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n\n    def __repr__(self):\n        return f'<User {self.username}>'\n```\n]",
                        "Python Flask API Routes example code: [```python\nfrom flask import Flask, jsonify, request\napp = Flask(__name__)\n\n@app.route('/products', methods=['GET'])\ndef get_products():\n    # Logic to fetch and return products\n    products = [{'id': 1, 'name': 'Product A'}, {'id': 2, 'name': 'Product B'}]\n    return jsonify(products)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\nThis Flask route '/products' is a part of the Product Service in a microservices setup, responsible for managing product data.",
                        "Python packages: Create a python package for each service with a __init__.py file. Write them all in one response since these don't need to be tested. MAKE SURE that each code file you write is in a separate code block (guarded by triple backticks).",
                        "Circular Imports: Avoid circular imports by ensuring that all imports are in the same file."
                ]
            }
        }
    ]
}