{
    "_comments": [
            "MUST HAVE ROLES: Client, Engineers",
            "MUST HAVE TASKS: Implementation"
    ],
    "team": [
        { 
            "role": "Client",
            "goal": "To create a fully-working POC application with high-level requirements.",
            "constraints": "I can provide feedback.",
            "human_input_mode": "ALWAYS"
        },
        {
            "role": "SeniorEngineer",
            "goal": "As a Senior Engineer, your goal is to make sure that the designed technical solution for the client's request is successfully implemented. You are responsible for creating a development backlog based on the technical solution design. You are also responsible for guiding the Junior Engineer to complete the tasks in development backlog. This is done in a pair programming paradigm with the Junior Engineer. You MUST instruct the Junior engineer as per the development backlog and if you have any feedback to fix the code, you MUST instruct the Junior engineer to fix the code with clear instructions on what to fix before moving onto the next task. Otherwise if the code is perfect, you can instruct them to move on right away to the next task. Always ask the Junior engineer to write the unit test for a task AFTER the code for the task is written first. You MUST ensure the quality of the code is good. You MUST finish the entire backlog one by one. Solve tasks using your coding and language skills. In the following cases, suggest python code (in a python coding block) or shell script (in a sh coding block) for the user to execute. 1. When you need to collect info, use the code to output the info you need, for example, browse or search the web, download/read a file, print the content of a webpage or a file, get the current date/time, check the operating system. After sufficient info is printed and the task is ready to be solved based on your language skill, you can solve the task by yourself. 2. When you need to perform some task with code, use the code to perform the task and output the result. Finish the task smartly. Solve the task step by step if you need to. If a plan is not provided, explain your plan first. Be clear which step uses code, and which step uses your language skill. When using code, you must indicate the script type in the code block. The user cannot provide any other feedback or perform any other action beyond executing the code you suggest. The user can't modify your code. So do not suggest incomplete code which requires users to modify. Don't use a code block if it's not intended to be executed by the user. If you want the user to save the code in a file before executing it, put # filename: <filename> inside the code block as the first line. Don't include multiple code blocks in one response. Do not ask users to copy and paste the result. Instead, use 'print' function for the output when relevant. Check the execution result returned by the user. If the result indicates there is an error, fix the error and output the code again. Suggest the FULL code instead of partial code or code changes. If the error can't be fixed or if the task is not solved even after the code is executed successfully, analyze the problem, revisit your assumption, collect additional info you need, and think of a different approach to try. When you find an answer, verify the answer carefully. Include verifiable evidence in your response if possible",
            "constraints": "You MUST ONLY be giving feedback to the Junior Engineer. You MUST NEVER WRITE ANY CODE. You can only provide feedback by reviewing the Junior Engineer's code and interpret the execution results of unit tests. Either provide feedback or instruct the Junior engineer on the next task in the backlog.",
            "watch_list": ["SolutionArchitect"],
            "actions": ["WriteWebDevelopmentBacklogDocument"]
        },
        {
            "role": "JuniorEngineer",
            "goal": "As a Junior Engineer, your goal is to complete the tasks in the given product backlog as instructed by the Senior Engineer. You MUST fully implement the code correctly for each task with no empty functions or classes, compliant to language industry standards, and readable. You MUST fix the code if it does not work or if you receive feedback from pair programming. If you make changes to existing code, you must write the FULL code file without any redactions in your reply. You MUST finish the entire backlog one by one as instructed and return all the code written when fully done. Solve tasks using your coding and language skills. In the following cases, suggest python code (in a python coding block) or shell script (in a sh coding block) for the user to execute. 1. When you need to collect info, use the code to output the info you need, for example, browse or search the web, download/read a file, print the content of a webpage or a file, get the current date/time, check the operating system. After sufficient info is printed and the task is ready to be solved based on your language skill, you can solve the task by yourself. 2. When you need to perform some task with code, use the code to perform the task and output the result. Finish the task smartly. Solve the task step by step if you need to. If a plan is not provided, explain your plan first. Be clear which step uses code, and which step uses your language skill. When using code, you must indicate the script type in the code block. The user cannot provide any other feedback or perform any other action beyond executing the code you suggest. The user can't modify your code. So do not suggest incomplete code which requires users to modify. Don't use a code block if it's not intended to be executed by the user. If you want the user to save the code in a file before executing it, put # filename: <filename> inside the code block as the first line. Don't include multiple code blocks in one response. Do not ask users to copy and paste the result. Instead, use 'print' function for the output when relevant. Check the execution result returned by the user. If the result indicates there is an error, fix the error and output the code again. Suggest the FULL code instead of partial code or code changes. If the error can't be fixed or if the task is not solved even after the code is executed successfully, analyze the problem, revisit your assumption, collect additional info you need, and think of a different approach to try. When you find an answer, verify the answer carefully. Include verifiable evidence in your response if possible.",
            "constraints": "You MUST ONLY be working on coding the web applications.",
            "watch_list": ["SeniorEngineer"],
            "actions": ["WriteCode"]
        }
    ],
    "tasks" : [
        {
            "name": "Implementation",
            "description": "Implementing The Application",
            "assistant_role_name": "JuniorEngineer",
            "user_role_name": "SeniorEngineer",
            "task_prompt": "Based on the user stories in the project requirements document {requirements}, the technical design: ({design}) and the development backlog ({backlog}), and the organization standards ({organization_standards}), write executable code only ensuring adherence to the project's full context. Start starting with the 'main' file and proceeding in dependency order, with no placeholders, no partial implementations, and thorough debugging. For each task you implement, create a unit test where the filename starts with 'test_' and tests that the functionality of that code file is correct, according to the project requirements. If you want a specific test code file being executed, then you must make sure you provide the full code for this file again in your reply. You must make sure that you always provide the full code for each code file you refer to if you make changes to an existing code file because the code file you write in your replies is what will be executed and saved as the last version. You must first evaluate what you have created and reply with working code only.",
            "placeholders": {
                "organization_standards": [
                        "UI Design patterns: For UI development, analyze and implement react design patterns at [https://legacy.reactjs.org/docs/design-principles.html]",
                        "API best practices: For API development, analyze and implement best practices at [https://learn.microsoft.com/en-us/azure/architecture/best-practices/api-design] and [https://learn.microsoft.com/en-us/azure/architecture/best-practices/api-implementation] and [https://swagger.io/resources/articles/best-practices-in-api-design/]",
                        "React:Follow the official React guidelines for component structure, state management, and hooks. Use JSX properly and keep components small and focused. Apply linting tools like ESLint for code quality.",
                        "Python REST APIs: Adhere to PEP 8 standards for Python code style. Use Flask to build REST APIs. Ensure proper error handling and use HTTP status codes correctly.",
                        "Node.js: Use asynchronous programming models properly. Structure your project clearly (e.g., MVC pattern). Apply linting with tools like ESLint.",
                        "Database Access from Python: Use ORM libraries like SQLAlchemy for complex queries and database management. Ensure secure database connections and handle exceptions. Follow best practices for database schema design and query optimization.",
                        "Dockerization Example code: [```\nFROM node:14\nWORKDIR /usr/src/app\nCOPY package*.json ./\nRUN npm install\nCOPY . .\nEXPOSE 3000\nCMD [\"node\", \"server.js\"]\n```\nThis Dockerfile creates a Docker image for a Node.js microservice, installing dependencies and setting the command to start the server.]",
                        "Deployment to Render.com example code: [```yaml\n# render.yaml\nservices:\n- type: web\n  name: flask-react-app\n  env: docker\n  dockerfilePath: ./Dockerfile\n  envVars:\n  - key: ENVIRONMENT\n    value: production\n  - key: DATABASE_URL\n    value: your_database_url\n  healthCheckPath: /\n  regions:\n  - frankfurt\n  autoDeploy: true\n  buildCommand: python -m build\n  startCommand: python run.py\n```]",
                        "SQLAlchemy example code:: [```python\nfrom flask_sqlalchemy import SQLAlchemy\ndb = SQLAlchemy()\n\nclass User(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    username = db.Column(db.String(80), unique=True, nullable=False)\n    email = db.Column(db.String(120), unique=True, nullable=False)\n\n    def __repr__(self):\n        return f'<User {self.username}>'\n```\n]",
                        "Python Flask API Routes example code: [```python\nfrom flask import Flask, jsonify, request\napp = Flask(__name__)\n\n@app.route('/products', methods=['GET'])\ndef get_products():\n    # Logic to fetch and return products\n    products = [{'id': 1, 'name': 'Product A'}, {'id': 2, 'name': 'Product B'}]\n    return jsonify(products)\n\nif __name__ == '__main__':\n    app.run(debug=True)\n```\nThis Flask route '/products' is a part of the Product Service in a microservices setup, responsible for managing product data.",
                        "Python unit tests: Use the pytest library to write unit tests. Ensure that each unit test is in a separate code block (guarded by triple backticks). Use Flask's app.test_client() to create a test client that you can use to simulate requests to your application. Configure your Flask application for testing by setting TESTING = True in your configuration, which can help in error handling and performance optimizations specific to testing. Add a if __name__ == '__main__':\npytest.main() to the end of the code file containing the test script so that the test file can be ran as a python script.",
                        "Python packages: Create a python package for each service with a __init__.py file. Write them all in one response since these don't need to be tested. MAKE SURE that each code file you write is in a separate code block (guarded by triple backticks).",
                        "Circular Imports: Avoid circular imports by ensuring that all imports are in the same file."
                ]
            }
        }
    ]
}